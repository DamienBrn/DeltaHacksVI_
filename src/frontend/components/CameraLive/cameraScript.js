//const api = require("../../../backend/services/api")

import api from "../../../backend/services/api";
//import fs from 'browserify-fs'
import 'resize-base64'
import LZString from 'lz-string'

let itemsCount = 0

setTimeout(() => {


  const controls = document.querySelector('.controls');
  const cameraOptions = document.querySelector('.video-options>select');
  const video = document.querySelector('video');
  const canvas = document.querySelector('canvas');
  const buttons = [...controls.querySelectorAll('button')];
  let streamStarted = false;

  const [play, pause, screenshot] = buttons;

  const constraints = {
    video: {
      width: {
        min: 1280,
        ideal: 1920,
        max: 2560,
      },
      height: {
        min: 720,
        ideal: 1080,
        max: 1440
      },
    }
  };

  cameraOptions.onchange = () => {
    const updatedConstraints = {
      ...constraints,
      deviceId: {
        exact: cameraOptions.value
      }
    };

    startStream(updatedConstraints);
  };

  play.onclick = () => {
    if (streamStarted) {
      video.play();
      play.classList.add('d-none');
      pause.classList.remove('d-none');
      return;
    }
    if ('mediaDevices' in navigator && navigator.mediaDevices.getUserMedia) {
      const updatedConstraints = {
        ...constraints,
        deviceId: {
          exact: cameraOptions.value
        }
      };
      startStream(updatedConstraints);
    }
  };

  const pauseStream = () => {
    video.pause();
    play.classList.remove('d-none');
    pause.classList.add('d-none');
  };

  async function doScreenshot() {
    canvas.width = 500;
    canvas.height = 400;
    canvas.getContext('2d').drawImage(video, 0, 0, 160, 160);
    var dataURL = canvas.toDataURL();

    // Save the file

    let base64Image = dataURL.split(';base64,').pop();

    // fs.writeFile('images/image.png', base64Image, { encoding: 'base64' }, function (err) {
    //   console.log('File created');
    // });


    // string generated by canvas.toDataURL()

    // strip off the data: url prefix to get just the base64-encoded bytes
    // var data = dataURL.replace(/^data:image\/\w+;base64,/, "");

    // var bitmap = new Buffer(data, 'base64');
    // console.log(data)

    // let compressedImg = data.split('').reduce((o, c) => {
    //   if (o[o.length - 2] === c && o[o.length - 1] < 35) o[o.length - 1]++;
    //   else o.push(c, 0);
    //   return o;
    // }, []).map(_ => typeof _ === 'number' ? _.toString(36) : _).join('');
    // var buf = new Buffer(data, 'base64');
    // fs.writeFile('image.txt', buf);

    // fs.writeFile('Users/kevintabatabaei/test.txt', dataURL)

    // const data = { dataURL }
    // const options = {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json'
    //   },
    //   body: JSON.stringify(data)
    // }
    // const response = await fetch('/imagesearch', options)
    // const json = await response.json()

    // console.log(json)

    // console.log('screenshot taken')
    // console.log("before " + base64Image.length)

    var compressed = LZString.compress(base64Image)
    console.log("after " + compressed.length)

    api.predictObjects({ binaryImage: compressed }).then(response => {
      itemsCount = response.data.countOfObjects
      console.log(itemsCount)
    })
  };

  pause.onclick = pauseStream;

  setInterval(() => {
    console.log("taking a ss")
    doScreenshot()
  }, 5000)

  const startStream = async (constraints) => {
    const stream = await navigator.mediaDevices.getUserMedia(constraints);
    handleStream(stream);
  };


  const handleStream = (stream) => {
    video.srcObject = stream;
    play.classList.add('d-none');
    pause.classList.remove('d-none');
    screenshot.classList.remove('d-none');

  };


  const getCameraSelection = async () => {
    const devices = await navigator.mediaDevices.enumerateDevices();
    const videoDevices = devices.filter(device => device.kind === 'videoinput');
    const options = videoDevices.map(videoDevice => {
      return `<option value="${videoDevice.deviceId}">${videoDevice.label}</option>`;
    });
    cameraOptions.innerHTML = options.join('');
  };

  getCameraSelection();

}, 1000)


